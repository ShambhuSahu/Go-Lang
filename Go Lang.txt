++++++++++++++++++ Their 3 types of variable +++++++++++++++

1 local level---- which is write inside the function and its scope is in only with in the function.

2 golbal level----which is write outside of the functionn its scope within function and outside of the function.
                 its always define as pascal like var Val1 int=4;

3 package_lavel-----which is write outside of the functionn its scope within function and outside of the function ,package and outside of the package also.
                 its always define as camelCase like var myVal int=4;

var a int=50;
var b=45;
fmt.Println(a);
fmt.Println(b);

+=how to check data type of the value
var val=10;

fmt.printf("%v, %T, val,val");


++++++++++++++++ Data types ++++++++++++++++++++++

int
float,
string,
complex,
const
arrays

var arr=[...]int{1,4,5,6,}

fmt.Println(arr);

==how to find data types 

fmt.println(len(arr))	


+++++++++++++++++++++= map +++++++++++++++++++++++++++++++
Maps are used to store data values in key:value pairs.

Each element in a map is a key:value pair.

A map is an unordered and changeable collection that does not allow duplicates.

The length of a map is the number of its elements. You can find it using the len() function.

The default value of a map is nil.

Maps hold references to an underlying hash table.

empSal:=map[string]int {

	"Neha":20000,
	"raj":23000,
	"atul":21000,
	
}

fmt.Println(empSal)
fmt.Println(empSal["raj"])

}

empSal["raj"]=8900;================ add value in list
fmt.Println(empSal["raj"])
// fmt.Println(empSal);

delete(empSal,"atul")=========== delete value in list
fmt.Println(empSal);

val , statusflag:=empSal["ankit"]============ check value is present or not
fmt.Println(val, statusflag);


++++++++++++++++++++++++++++++++++++++++++++++ Slice +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Go Slices

Slices are similar to arrays, but are more powerful and flexible.

Like arrays, slices are also used to store multiple values of the same type in a single variable.

However, unlike arrays, the length of a slice can grow and shrink as you see fit.

In Go, there are several ways to create a slice:

Using the []datatype{values} format
Create a slice from an array
Using the make() function


var arr[]int =[]int{1,3,4,5}
arr2:=arr;
fmt.Println(arr);	
fmt.Println(arr2);

arr2[2]=300;

fmt.Println(arr);	
fmt.Println(arr2);

====================== lenth and capacity ===========================

var arr3 []int=make([]int, 2,5);

fmt.Println(cap(arr3))
fmt.Println(len(arr3))

+++++++++++++++++++++++++++++++++++ append array and data ++++++++++++
var arr[]int =[]int{1,3,4,5};

arr=append(arr, 12) // append or add data in array
fmt.Println(arr)

arr2:=append(arr,23)// append one arrya inside another array
fmt.Println(arr2);

arr3:=append(arr,arr2...) //apppend two array inside one array
fmt.Println(arr3)

+++++++++++++++++++++++++++++++++ structs ++++++++++++++++++++++++++++

In Go programming, a structure or struct is a user-defined type to store a collection of different fields into a single field. 

For example, suppose you have a player and want to store his name and age. You can create two variables, name, and age,
to store the values. Now, suppose you have a football team and want to store the same information for each player. 

This is where struct comes into play. You can design a struct that stores the values of the name and age of each player.




Go Structures
A struct (short for structure) is used to create a collection of members of different data types, into a single variable.

While arrays are used to store multiple values of the same data type into a single variable, 
structs are used to store multiple values of different data types into a single variable.

A struct can be useful for grouping data together to create records.

Declare a Struct
To declare a structure in Go, use the type and struct keywords:

---------------------------------------
Syntax
type struct_name struct {
  member1 datatype;
  member2 datatype;
  member3 datatype;
  ...
}

Example
Here we declare a struct type Person with the following members: name, age, job and salary:

type Person struct {
  name string
  age int
  job string
  salary int
}
Tip: Notice that the struct members above have different data types. name and job is of type string, while age and salary is of type int.

Access Struct Members
To access any member of a structure, use the dot operator (.) between the structure variable name and the structure member:

Example
package main
import ("fmt")

type Person struct {
  name string
  age int
  job string
  salary int
}

func main() {
  var pers1 Person
  var pers2 Person

  // Pers1 specification
  pers1.name = "Hege"
  pers1.age = 45
  pers1.job = "Teacher"
  pers1.salary = 6000

  // Pers2 specification
  pers2.name = "Cecilie"
  pers2.age = 24
  pers2.job = "Marketing"
  pers2.salary = 4500

  // Access and print Pers1 info
  fmt.Println("Name: ", pers1.name)
  fmt.Println("Age: ", pers1.age)
  fmt.Println("Job: ", pers1.job)
  fmt.Println("Salary: ", pers1.salary)

  // Access and print Pers2 info
  fmt.Println("Name: ", pers2.name)
  fmt.Println("Age: ", pers2.age)
  fmt.Println("Job: ", pers2.job)
  fmt.Println("Salary: ", pers2.salary)
}










====================================== LOOP ==================================================================

package main
import ("fmt")

func main() {
  for i:=0; i < 5; i++ {
    fmt.Println(i)
  }
}




======================================== funtction ==================================================================
A function is a block of statements that can be used repeatedly in a program.

A function will not execute automatically when a page loads.

A function will be executed by a call to the function.

Create a Function
To create (often referred to as declare) a function, do the following:

Use the func keyword.
Specify a name for the function, followed by parentheses ().
Finally, add code that defines what the function should do, inside curly braces {}.

package main
import ("fmt")

func myMessage() {
  fmt.Println("I just got executed!")
}

func main() {
  myMessage() // call the function
}


------------------------- Function With Parameter Example-------------------------

package main
import ("fmt")

func familyName(fname string) {
  fmt.Println("Hello", fname, "Refsnes")
}

func main() {
  familyName("Liam")
  familyName("Jenny")
  familyName("Anja")
}



o/p:

Hello Liam Refsnes
Hello Jenny Refsnes
Hello Anja Refsnes

---------------------- Function Return Example -------------------------
package main
import ("fmt")

func myFunction(x int, y int) int {
  return x + y
}

func main() {
  fmt.Println(myFunction(1, 2))
}

o/p:- 3



------------------------------------ maps -----------------------------------

Go Maps
Maps are used to store data values in key:value pairs.

Each element in a map is a key:value pair.

A map is an unordered and changeable collection that does not allow duplicates.

The length of a map is the number of its elements. You can find it using the len() function.

The default value of a map is nil.

Maps hold references to an underlying hash table.

Go has multiple ways for creating maps.

Creating Maps Using var and :=
Syntax
var a = map[KeyType]ValueType{key1:value1, key2:value2,...}
b := map[KeyType]ValueType{key1:value1, key2:value2,...}
Example
This example shows how to create maps in Go. Notice the order in the code and in the output

package main
import ("fmt")

func main() {
  var a = map[string]string{"brand": "Ford", "model": "Mustang", "year": "1964"}
  b := map[string]int{"Oslo": 1, "Bergen": 2, "Trondheim": 3, "Stavanger": 4}

  fmt.Printf("a\t%v\n", a)
  fmt.Printf("b\t%v\n", b)
}
Result:

a   map[brand:Ford model:Mustang year:1964]
b   map[Bergen:2 Oslo:1 Stavanger:4 Trondheim:3]
